{
  "questions": [
    {
      "id": 1,
      "type": "single",
      "question": "რომელი მეთოდი გვიბრუნებს ობიექტის პრიმიტიულ მნიშვნელობას?",

      "options": ["values()", "concat()", "at()", "valueOf()"]
    },
    {
      "id": 2,
      "type": "multiple",
      "question": "რომლებია Array-ის მეთოდები? ",

      "options": ["map()", "valueOf()", "filter()", "values()"]
    },
    {
      "id": 3,
      "type": "single",
      "question": "რისთვის გამოიყენება concat() მეთოდი?",

      "options": [
        "ორ ან მეტ array-ის აერთიანებს ისე რომ არ ეხება არსებულ array-ის და ქმნის ახალს.",
        "ქმნის ახალ array-ის და გადააწერს არსებულს",
        "აერთიანებს ყველა არსებულ array-ის და ქმნის ერთ ახალ array-ის",
        "ანაცვლებს ძველ array-ის ახალი array-ით"
      ]
    },
    {
      "id": 4,
      "type": "boolean",
      "question": "სწორია თუ არა შედეგი;  const array = [1,2,3,4,5,6]; console.log(array.fill(10));  output: (6) [10, 10, 10, 10, 10, 10]"
    },
    {
      "id": 5,
      "type": "single",
      "question": "  ამოირჩიე მოსალოდნელი შედეგი:   const names = [`giorgi`,`danieli`,`temo`,`giorgi`]  const result = names.find(name => name == `giorgi`)   console.log(result)",
      "options": ["giorgi, giorgi", "danieli", "giorgi", "temo"]
    },
    {
      "id": 6,
      "type": "boolean",
      "question": "const listA = [1,2,3]; const listB = new Array(6);console.log(listA.length);output: 3"
    },
    {
      "id": 7,
      "type": "multiple",
      "question": "რომელი მიეკუთვნება OOP-ს პრინციპებს: ",
      "options": ["Encapsulation", "Abstraction", "Inheritance", "Polymorphism"]
    },
    {
      "id": 8,
      "type": "single",
      "question": "რომელი პროგრამული ენა გამოიყენება front-end Development-ში? ",
      "options": ["JavaScript", "Python", "HTMl", "Angular"]
    }
  ],
  "answers": [
    {
      "id": 1,
      "answer": 4
    },
    {
      "id": 2,
      "answer": [1, 3]
    },
    {
      "id": 3,
      "answer": 1
    },
    {
      "id": 4,
      "answer": true
    },
    {
      "id": 5,
      "answer": 3
    },
    {
      "id": 6,
      "answer": true
    },
    {
      "id": 7,
      "answer": [1, 2, 3, 4]
    },
    {
      "id": 8,
      "answer": 1
    }
  ]
}
